requires 2.0.0

%headertop{
#include <math.h>
#include <gtk/gtk.h>
#include "giv-win.h"
#include "giv-data.h"
#include <stdint.h>
%}

%{
static void
cb_toggled (GtkCellRendererToggle *cell,
	    gchar                 *path_string,
	    gpointer               data);
static void set_state_tree_node_children(GtkTreeModel *model,
                                         GtkTreeIter *parent_iter,
                                         bool new_state);

static void get_iter_from_mark_set(GivMarkTreeDialog *self,
                                   giv_dataset_t *mark_set,
				   GtkTreeStore *model,
				   /* output */
				   GtkTreeIter **iter);

 static void get_iter_from_string_path(GivMarkTreeDialog *self,
                                      const char *filename,
				      const char *string_path,
				      GtkTreeStore *model,
				      /* output */
				      GtkTreeIter **iter);
static void strip_last_leaf(const char *string_path,
			    /* output */
			    char **string_path_no_last_leaf,
			    char **string_last_leaf);
%}

class Giv:Mark:Tree:Dialog from Gtk:Dialog {
    private GtkWidget *w_giv = NULL;
    private GtkTreeStore *model = NULL;
    private GPtrArray *mark_set_list = NULL;
    private GHashTable *hash_giv_path_to_iter = NULL;
    
    public GtkWidget *
    new(GivWin *w_giv)
    {
        GivMarkTreeDialog *self = GIV_MARK_TREE_DIALOG(GET_NEW);
        GtkWidget *vbox, *scrolled_window, *tree_view;
        GtkTreeViewColumn *column;
        GtkCellRenderer *cell;

        selfp->w_giv = GTK_WIDGET(w_giv);
        gtk_window_set_transient_for(GTK_WINDOW(self),
                                     GTK_WINDOW(w_giv));
        gtk_window_set_destroy_with_parent(GTK_WINDOW(self), TRUE);
        gtk_dialog_add_buttons(GTK_DIALOG(self),
                               GTK_STOCK_CLOSE,
                               GTK_RESPONSE_ACCEPT,
                               NULL);

        gtk_window_set_default_size (GTK_WINDOW (self), 400, 350);
        
        vbox = GTK_DIALOG(self)->vbox;
        scrolled_window = gtk_scrolled_window_new (NULL, NULL);
        gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled_window),
                                        GTK_POLICY_AUTOMATIC,
                                        GTK_POLICY_AUTOMATIC);
        gtk_box_pack_start (GTK_BOX (vbox), scrolled_window, TRUE, TRUE, 0);
        
        selfp->model = gtk_tree_store_new (3, G_TYPE_STRING, G_TYPE_BOOLEAN, G_TYPE_INT);
        tree_view = gtk_tree_view_new_with_model (GTK_TREE_MODEL (selfp->model));
        gtk_container_add (GTK_CONTAINER (scrolled_window), tree_view);
        
        /* First text column */
        column = gtk_tree_view_column_new();
        cell = gtk_cell_renderer_text_new ();
        gtk_tree_view_column_set_resizable(column, TRUE);
        gtk_tree_view_column_set_min_width(column, 180);
        gtk_tree_view_column_pack_start (column, cell, TRUE);
        gtk_tree_view_column_set_attributes (column, cell,
                                             "text", 0,
                                             NULL);
        gtk_tree_view_column_set_title (column, "Path");
        gtk_tree_view_append_column (GTK_TREE_VIEW (tree_view), column);
        
        /* Toggle column */
        column = gtk_tree_view_column_new();
        cell = gtk_cell_renderer_toggle_new ();
        g_object_set(G_OBJECT(cell),
                     "xpad", 0,
                     NULL);
        
        g_signal_connect (cell, "toggled",
                          G_CALLBACK (cb_toggled), self);
        
        gtk_tree_view_column_pack_start (column, cell, TRUE);
        gtk_tree_view_column_set_attributes (column, cell,
                                             "active", 1,
                                             NULL);
        /* gtk_tree_view_column_set_resizable(column, TRUE); */
        gtk_tree_view_column_set_title (column, "Visible");
        gtk_tree_view_append_column (GTK_TREE_VIEW (tree_view), column);
        
        /* Second column */
        column = gtk_tree_view_column_new();
        gtk_tree_view_column_set_resizable(column, TRUE);
        cell = gtk_cell_renderer_text_new ();
        g_object_set (G_OBJECT (cell),
                      "xalign", 1.0,
                      NULL);
        gtk_tree_view_column_pack_start (column, cell, TRUE);
        gtk_tree_view_column_set_fixed_width (column, 50);
        gtk_tree_view_column_set_attributes (column, cell,
                                             "text", 2,
                                             NULL);
        gtk_tree_view_column_set_title (column, "#nodes");
        gtk_tree_view_append_column (GTK_TREE_VIEW (tree_view), column);
        
        /* Create the hash table that maps between giv paths and the
           iters of the tree.
        */
        if (selfp->hash_giv_path_to_iter)
            g_hash_table_destroy(selfp->hash_giv_path_to_iter);
        selfp->hash_giv_path_to_iter = g_hash_table_new_full(g_str_hash,
                                                             g_str_equal,
                                                             g_free,
                                                             g_free);
  
        selfp->mark_set_list = giv_win_get_giv_data(GIV_WIN(selfp->w_giv));
        for(int i=0; i<(int)selfp->mark_set_list->len; i++) {
            giv_dataset_t *mark_set = (giv_dataset_t*)g_ptr_array_index(selfp->mark_set_list,i);
            GtkTreePath *tree_path;
            GtkTreeIter *iter;
            gchar *path_name;
            
            get_iter_from_mark_set(self, mark_set, selfp->model,
                                   &iter);
            
            /* This is a very ugly way of summing up the value with that of the
               previous columns. That are currently stored in user_data2 of
               the iterators.
            */
            *((int*)&iter->user_data2) += mark_set->points->len;
            
            gtk_tree_store_set(selfp->model, iter,
                               2, (intptr_t)iter->user_data2,
                               -1);
            
            /* Recursively sum the points */
            path_name = g_strdup(mark_set->path_name);
            while(path_name) {
                GtkTreeIter *iter;
                gchar *string_path_no_last_leaf;
                gchar *string_last_leaf;
                
                strip_last_leaf(path_name,
                                /* output */
                                &string_path_no_last_leaf,
                                &string_last_leaf);
                g_free(path_name);
                g_free(string_last_leaf);
                path_name = string_path_no_last_leaf;
                get_iter_from_string_path(self,
                                          mark_set->file_name,
                                          path_name,
                                          selfp->model,
                                          &iter);
                *((int*)&iter->user_data2)+= mark_set->points->len;
                gtk_tree_store_set(selfp->model, iter,
                                   2, (intptr_t)(iter->user_data2),
                                   -1);
            }
            
            tree_path = gtk_tree_model_get_path(GTK_TREE_MODEL(selfp->model), iter);
            if (mark_set->tree_path_string)
                g_free(mark_set->tree_path_string);
            mark_set->tree_path_string = gtk_tree_path_to_string(tree_path);
            gtk_tree_path_free(tree_path);
            /* g_free(&iter); */
            
        }
        gtk_tree_view_expand_all(GTK_TREE_VIEW(tree_view));
        
        gtk_widget_show_all(vbox);
        
        return GTK_WIDGET(self);
    }

    override (Gtk:Dialog) void
    response (Gtk:Dialog *self,
              gint response_id)
    {
        gtk_widget_destroy(GTK_WIDGET(self));
    }
}

%{
static void
cb_toggled (GtkCellRendererToggle *cell,
	    gchar                 *path_string,
	    gpointer               data)
{
    GivMarkTreeDialog *self = GIV_MARK_TREE_DIALOG(data);
    GtkTreeModel *model = GTK_TREE_MODEL (selfp->model);
    GtkTreeIter iter;
    GtkTreePath *path = gtk_tree_path_new_from_string (path_string);
    gboolean value;
    gtk_tree_model_get_iter (model, &iter, path);
    gtk_tree_model_get (model, &iter, 1, &value, -1);

    value = !value;

    gtk_tree_store_set (GTK_TREE_STORE (model), &iter, 1, value, -1);
    set_state_tree_node_children(model, &iter, value);
  
#if 0
    if (value)
        gtk_tree_view_expand_row(GTK_TREE_VIEW(w_tree_view), path, FALSE);
    else
        gtk_tree_view_collapse_row(GTK_TREE_VIEW(w_tree_view), path);
#endif
      
    gtk_tree_path_free (path);

    /* Loop over all the mark sets and make them visible or invisible */
    for(int i=0; i<(int)selfp->mark_set_list->len; i++) {
        giv_dataset_t *mark_set = (giv_dataset_t*)g_ptr_array_index(selfp->mark_set_list, i);
        
        /* Here check if there is a match between the path string and the
           dataset name... If we are opening up a node with subnodes, then
           we should loop over the subnotes and set up the visible datasets.
        */
        if (strstr(mark_set->tree_path_string, path_string) == mark_set->tree_path_string && (
                                                                                              mark_set->tree_path_string[strlen(path_string)] == '\0'
                                                                                              || mark_set->tree_path_string[strlen(path_string)] == ':'))
            {
                mark_set->is_visible = value;
            }
        
    }
    
    giv_win_redraw(GIV_WIN(selfp->w_giv));
}

/*======================================================================
//  Given a mark set, extract the corresponding iter that belongs to
//  it. This is jupst a front end to the recursive
//  get_iter_from_string_path().
//----------------------------------------------------------------------
*/
static void get_iter_from_mark_set(GivMarkTreeDialog *self,
                                   giv_dataset_t *mark_set,
				   GtkTreeStore *model,
				   /* output */
				   GtkTreeIter **iter)
{
    get_iter_from_string_path(self,
                              mark_set->file_name,
			      mark_set->path_name,
			      model,
			      iter);

}

/*======================================================================
//  Returns an iterator from the hash table. If it doesn't exist,
//  then a new key is created.
//----------------------------------------------------------------------
*/
 static void get_iter_from_string_path(GivMarkTreeDialog *self,
                                      const char *filename,
				      const char *string_path,
				      GtkTreeStore *model,
				      /* output */
				      GtkTreeIter **iter)
{
    gchar *string_path_no_last_leaf = NULL;
    gchar *string_last_leaf = NULL;
    GtkTreeIter *parent, *new_iter;
    gchar *key;
    gchar *basename = g_path_get_basename(filename);
    
    if (string_path == NULL)
      key = g_strdup(basename);
    else
      key = g_strdup_printf("%s///%s", basename, string_path);

    *iter = (GtkTreeIter*)g_hash_table_lookup(selfp->hash_giv_path_to_iter, key);
    
    if (*iter) {
	g_free(key);
        return;
    }

    if (string_path) {
	strip_last_leaf(string_path,
			// output
			&string_path_no_last_leaf,
			&string_last_leaf);

	get_iter_from_string_path(self,
                                  basename,
				  string_path_no_last_leaf,
				  model,
				  // output 
				  &parent);
      }
    else {
        string_last_leaf = g_strdup(basename);
	parent = NULL;
    }
    
    g_free(basename);
    new_iter = g_new0(GtkTreeIter, 1);
    new_iter->user_data = 0;
    gtk_tree_store_append(model, new_iter, parent);
    gtk_tree_store_set (model, new_iter,
			0, string_last_leaf,
			1, 1,
			2, 0,
			-1);

    g_hash_table_insert(selfp->hash_giv_path_to_iter,
			(gpointer)(key),
			(gpointer)(new_iter));
    if (string_last_leaf)
        g_free(string_last_leaf);
    if (string_path_no_last_leaf)
        g_free(string_path_no_last_leaf);
    *iter = new_iter;
}

static void strip_last_leaf(const char *string_path,
			    /* output */
			    char **string_path_no_last_leaf,
			    char **string_last_leaf)
{
  gchar *split_pos;
  
  split_pos = g_strrstr(string_path, "/");

  if (split_pos)
    {
      *string_last_leaf = g_strdup(split_pos+1);
      *string_path_no_last_leaf = g_strndup(string_path, split_pos - string_path);
    }
  else
    {
      *string_path_no_last_leaf = NULL;
      *string_last_leaf = g_strdup(string_path);
    }
}

static void set_state_tree_node_children(GtkTreeModel *model,
                                         GtkTreeIter *parent_iter,
                                         bool new_state)
{
  int n_children = gtk_tree_model_iter_n_children(model,
                                                  parent_iter);
  for (int i=0; i<n_children; i++)
  {
    GtkTreeIter iter;
    gboolean value;
    gtk_tree_model_iter_nth_child(model,
                                  &iter,
                                  parent_iter,
                                  i);
    // Set the new value
    gtk_tree_store_set (GTK_TREE_STORE (model), &iter, 1, new_state, -1);

    // recursive call
    set_state_tree_node_children(model,&iter,new_state);
  }
}
%}
